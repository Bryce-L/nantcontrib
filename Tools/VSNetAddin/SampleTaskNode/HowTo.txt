
 -WRITING A CUSTOM TASK NODE-

 This SampleTaskNode project demonstrates how to write a 
 custom Task Node for the NAnt Addin. This is something you 
 would do if you had written a new Task for NAnt, and wanted 
 the Addin to fully recognize your task. Tasks that are not 
 recognized by the Addin (do not have a corresponding class 
 like the one in this sample) are treated as "generic" tasks 
 where the user can only edit the properties that are common 
 to all tasks. Writing and configuring a Task Node like in 
 this sample with the same XML element name as your custom 
 NAnt task will give you full integration with the Addin.

 Task Node classes must have the:

		NAnt.Contrib.NAntAddin.Nodes.NAntTaskNode 

 class as their base class, and define a constructor with the 
 exact same parameter signature as the base class.

 They also need to be marked up with the:

		NAnt.Contrib.NAntAddin.Nodes.NAntTaskAttribute 

 attribute to configure the XML element name, description, and 
 image filename of the Task's node. The image filename MUST be 
 only the name of the file, and should not include any path info.

 Expose any properties on this class to have them displayed 
 in the Visual Studio.NET properties window when tasks of your 
 type are selected in the Script Explorer window. Properties 
 that are filesets (a set of includes/excludes elements) should 
 define a class that has the:

		NAnt.Contrib.NAntAddin.Nodes.NAntFileSet

 class as its base class. See the FileSet, Modules, 
 Sources, References, IncludeDirs, and LibDirs classes in 
 the NAnt.Contrib.NAntAddin.Nodes namespace for an example.

 Properties that are other Components themselves and could be 
 expanded by the Properties editor (similar to filesets) but 
 have different child elements than "includes" or "excludes" 
 need to implement the:
 
	NAnt.Contrib.NAntAddin.Nodes.ConstructorArgResolver 
	
 interface so the Addin can make read-only copies of your node 
 when a NAnt script's .build file is read-only. See the source 
 code to the NAntNDocTaskNode and NAntNUnitTaskNode classes in 
 the NAnt.Contrib.NAntAddin.Nodes namespace for examples of how 
 to do this.

 Once you have compiled your TaskNode into a class library (.dll) 
 in a Visual Studio project (or otherwise), you have two options 
 for plugging it into the Addin. The first involves opening an 
 existing NAnt file with the addin, right-clicking on a Target 
 node and choosing the "Add Task" menu item, and clicking the 
 "Import Task..." button on that dialog.

 The second option is to edit the XML file that importing a 
 task through the Addin does but by hand. This file is named 
 "NAntTaskNodes.xml" and resides in the directory you installed 
 the Addin to. Add an XML element specifying the XML element 
 name of the task, and the Microsoft.NET fully-qualified type 
 name of the task's node class. Also copy the image file into 
 the "TaskImages" subdirectory of the directory you installed 
 the Addin to. Importing through the addin does this for you.

 If you place your .dll in the same directory as the Addin, 
 the above steps will work for manual addition of a custom 
 task node as is. If not, you need to also add an "assembly" 
 attribute to the element to specify the full path to the 
 assembly's class library (.dll). For example:

 (NAntTaskNodes.xml)

 <NAntTaskNodes>
   <!-- Other Tasks Omitted for Brevity -->
   <NAntTaskNode name="sampletask" typeName="NAntAddinSample.SampleTaskNode" 
		assembly="C:\SomeDirectory\SampleTaskNode.dll"/>
 </NAntTaskNodes>

 Good Luck!
 
 -Jayme C. Edwards 
 NAnt Addin Contributor
 <jedwards@wi.rr.com>
 