<?xml version="1.0"?>
<project name="NAntContrib" default="test">
    <include buildfile="../properties.xml" failonerror="false" />
    <!-- global project settings -->
    <property name="project.name" value="nantcontrib" />
    <property name="project.FormalName" value="NAnt.Contrib" />
    <property name="project.version" value="0.85" overwrite="false" />
    
    <!-- default configuration -->
    <property name="project.config" value="debug" /> <!-- debug|release -->
    <property name="build.defines" value="" />
    <property name="build.number" value="${math::abs(math::floor(timespan::get-total-days(datetime::now() - convert::to-datetime('01-01-2000'))))}" overwrite="false" />
    <property name="src.dir" value="src" />
    <property name="tests.dir" value="tests" />
    <property name="tools.dir" value="Tools" />
    <property name="nant.base.uri" value="${nant.dir}/doc/help/" overwrite="false" />
    
    <!-- named project configurations (used by self-test and self-doc tasks) -->
    <target name="debug" description="Perform a 'debug' build">
        <property name="project.config" value="debug" />
        <property name="build.debug" value="true" />
        <property name="build.dir" value="${nant.project.basedir}/build/${project.name}-${project.version}-${project.config}" />
    </target>
    <target name="release" description="Perform a 'release' build">
        <property name="project.config" value="release" />
        <property name="build.debug" value="false" />
        <property name="build.dir" value="${nant.project.basedir}/build/${project.name}-${project.version}" />
    </target>
    
    <!-- build tasks -->
    <target name="init" description="Initializes build properties">
        <call target="${project.config}" />
        <call target="set-framework-configuration" />
        <if test="${not property::exists('nant.dir')}">
            <fail message="Please pass the folder containing the NAnt build on the commandline as a property (-D:nant.dir=???)." />
        </if>
        <available property="NAntReleaseExists" resource="${nant.dir}" type="Directory"/>
        <if test="${not NAntReleaseExists}">
            <fail message="The specified folder containing the NAnt build (${nant.dir}) does not exist." />
        </if>
        <echo message="Using nant files from ${nant.dir}"/>
    </target>
    <target name="create-common-assemblyinfo">
        <!-- ensure src/CommonAssemblyInfo.cs is writable if it already exists -->
        <attrib file="src/CommonAssemblyInfo.cs" readonly="false" if="${file::exists('src/CommonAssemblyInfo.cs')}" />
        <!-- generate the source file holding the common assembly-level attributes -->
        <asminfo output="src/CommonAssemblyInfo.cs" language="CSharp">
            <imports>
                <import name="System.Reflection" />
            </imports>
            <attributes>
                <attribute type="AssemblyConfigurationAttribute" value="${nant.settings.currentframework}.${nant.platform.name}; nightly" />
                <attribute type="AssemblyCompanyAttribute" value="http://nantcontrib.sourceforge.net" />
                <attribute type="AssemblyProductAttribute" value="NAntContrib" />
                <attribute type="AssemblyCopyrightAttribute" value="Copyright (C) 2001-${datetime::get-year(datetime::now())} Gerry Shaw" />
                <attribute type="AssemblyTrademarkAttribute" value="" />
                <attribute type="AssemblyCultureAttribute" value="" />
                <attribute type="AssemblyVersionAttribute" value="${project.version}.${build.number}.0" />
                <attribute type="AssemblyInformationalVersionAttribute" value="${project.version}" />
            </attributes>
        </asminfo>
    </target>
    
    <include buildfile="NAntContribInstall.include" />
    <include buildfile="${tools.dir}/SLiNgshoT/SLiNgshoTInstall.include" />
    
    <!-- Clean the output of the current build configuration -->
    <target name="clean" depends="init" description="cleans up everything">
        <delete dir="${build.dir}" failonerror="false"/>
    </target>
    
    <!-- Clean the output of both the debug and release build configurations -->
    <target name="cleanall" depends="" description="cleans up everything">
        <foreach item="String" in="release debug" delim=" " property="target">
            <call target="${target}"/>
            <call target="clean" failonerror="false"/>
        </foreach>
        <delete dir="build"/>
    </target>
    
    <!-- Prepare directories and build settings -->
    <target name="prepare" depends="init">
      <mkdir dir="${build.dir}/bin"/>
      <copy todir="${build.dir}/bin">
            <fileset basedir="bin">
                <includes name="CollectionGen.dll" />
                <includes name="SourceSafe.Interop.dll" />
                <includes name="Interop.StarTeam.dll" />
                <includes name="Interop.WindowsInstaller.dll" />
                <includes name="Interop.MsmMergeTypeLib.dll" />
                <includes name="MSITaskErrors.mst" />
                <includes name="MSITaskTemplate.msi" />
                <includes name="MSMTaskErrors.mst" />
                <includes name="MSMTaskTemplate.msm" />
            </fileset>
      </copy>
    </target>

    <!-- Bootstrap the Xsd Task -->
    <target name="compile.schematask" depends="init" description="compiles the Xsd task">
        <csc target="library" warnaserror="true" debug="${build.debug}" define="${current.build.defines}" output="${build.dir}/bin/NAnt.Xsd.Tasks.dll">
            <sources basedir="${src.dir}">
                <includes name="Tasks/XsdTask.cs" />
            </sources>
            <references>
                <includes name="${nant.dir}/bin/NAnt.Core.dll" />
                <includes name="${nant.dir}/bin/NAnt.DotNetTasks.dll" />
            </references>
        </csc>
    </target>

    <!-- Bootstrap XML Schemas into assemblies for task validation -->
    <target name="compile.schemas" depends="compile.schematask" description="compiles Task XML Schemas into assemblies">
        <uptodate property="schema.uptodate">
            <sourcefiles>
                <includes name="${src.dir}/Tasks/Msi/MsiTask.xsd" />
            </sourcefiles>
            <targetfiles basedir="${build.dir}/schema/Msi">
                <includes name="*.resources" />
            </targetfiles>
        </uptodate>
        <if test="${not schema.uptodate}">
            <mkdir dir="${build.dir}/schema/Msi" unless="${directory::exists(build.dir + '/schema/Msi')}" />
            <loadtasks assembly="${build.dir}/bin/NAnt.Xsd.Tasks.dll" />
            <xsd schema="${src.dir}/Tasks/Msi/MsiTask.xsd" language="CS" namespace="NAnt.Contrib.Schemas.Msi" nologo="true" outputdir="${build.dir}/schema/Msi" uri="NAnt.Contrib.Tasks.Msi.MsiTask" />
        </if>
    </target>

    <!-- Build the NAnt.Contrib.Tasks.dll library -->
    <target name="build" depends="prepare, prepare.slingshot, compile.schemas, create-common-assemblyinfo" description="compiles the source code">
        <csc target="library" warnaserror="true" nowarn="0618,1591" debug="${build.debug}" define="${current.build.defines}" output="${build.dir}/bin/${project.FormalName}.Tasks.dll" doc="${build.dir}/bin/${project.FormalName}.Tasks.xml">
            <sources>
                <includes name="${src.dir}/**.cs" />
                <includes name="${build.dir}/schema/**.cs" />

                <excludes name="${src.dir}/tasks/SharePoint/**.cs" />
            </sources>
            <references>
                <includes name="${nant.dir}/bin/NAnt.Core.dll" />
                <includes name="${nant.dir}/bin/NAnt.DotNetTasks.dll" />
                <includes name="${nant.dir}/bin/NAnt.SourceControlTasks.dll" />                
                <includes name="${build.dir}/bin/CollectionGen.dll" />
                <includes name="${build.dir}/bin/SourceSafe.Interop.dll" />
                <includes name="${build.dir}/bin/Interop.StarTeam.dll" />
                <includes name="${build.dir}/bin/Interop.WindowsInstaller.dll" />
                <includes name="${build.dir}/bin/Interop.MsmMergeTypeLib.dll" />
                <includes name="${build.dir}/bin/SLiNgshoT.Core.dll" />
                <includes name="${build.dir}/bin/NAnt.Contrib.Schemas.dll" />
            </references>
            <resources>
                <includes name="${src.dir}/xsl/**" />
                <includes name="${build.dir}/schema/**.resources" />
            </resources>
        </csc>
    </target>

    <!-- Build the SLiNgshoT.Core.dll assemblies -->
    <target name="prepare.slingshot" depends="init" description="Compiles and copies the SLiNgshoT assemblies">
        <nant buildfile="${tools.dir}/SLiNgshoT/SLiNgshoT.build" target="Release"/>
        <copy file="${tools.dir}/SLiNgshoT/build/Release/SLiNgshoT.Core.dll" tofile="${build.dir}/bin/SLiNgshoT.Core.dll"/>
        <copy file="${tools.dir}/SLiNgshoT/build/Release/SLiNgshoT.exe" tofile="${build.dir}/bin/SLiNgshoT.exe"/>
    </target>

    <!-- Build the unit tests library -->
    <target name="buildtests" depends="build" description="Compiles the NUnit Tests">
        <!-- copy NAnt assemblies needed for the tests to run -->
        <copy todir="${build.dir}/bin" flatten="true">
            <fileset basedir="${nant.dir}" failonempty="true">
                <includes name="bin/NAnt.Core.dll" />
                <includes name="bin/NAnt.DotNetTasks.dll" />
                <includes name="bin/lib/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}/nunit.framework.dll" />
                <includes name="bin/lib/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}/log4net.dll" />
            </fileset>
        </copy>
        <!-- compile the test assembly -->
        <csc target="library" warnaserror="true" nowarn="1591" debug="${build.debug}" define="${current.build.defines}" output="${build.dir}/bin/${project.FormalName}.Tests.dll">
            <sources>
                <includes name="${tests.dir}/**/*.cs" />
                <!-- common assembly-level attributes -->
                <includes name="${src.dir}/CommonAssemblyInfo.cs" />
                
                <excludes name="${tests.dir}/tasks/SharePoint/**.cs"/>
            </sources>
            <references>
                 <includes name="${nant.dir}/bin/NAnt.Core.dll" />
                 <includes name="${nant.dir}/bin/lib/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}/nunit.framework.dll" />
                 <includes name="${build.dir}/bin/${project.FormalName}.Tasks.dll" />
                 <includes name="${build.dir}/bin/SourceSafe.Interop.dll" />
            </references>
        </csc>
    </target>

    <!-- Perform unit tests. -->
    <target name="test" depends="buildtests init" description="run unit tests">
        <!-- make copy of NAnt configuration file -->
        <copy file="${nant.location}nant.exe.config" tofile="${nant.location}nant.tests.config" />
        
        <!-- make sure the config file is writable -->
        <attrib file="${nant.location}nant.tests.config" readonly="false" />
        
        <!-- ensure the tests target the current framework -->
        <xmlpoke file="${nant.location}nant.tests.config"
                 xpath="//configuration/nant/frameworks/platform[@name='${nant.platform.name}']/@default"
                 value="${nant.settings.currentframework}"/>

        <!-- output the config file that will be used to run the tests -->
        <echo message="testing with config '${nant.location}nant.tests.config'"/>

        <!-- execute the unit tests -->
        <nunit2>
            <formatter type="Plain" />
            <test assemblyname="${build.dir}/bin/${project.FormalName}.Tests.dll" appconfig="${nant.location}nant.tests.config" />
        </nunit2>
        
        <!-- remove NAnt assemblies that were needed for the tests to run -->
        <delete>
            <fileset basedir="${build.dir}/bin">
                <includes name="NAnt.Core.dll" />
                <includes name="NAnt.DotNetTasks.dll" />
                <includes name="nunit.framework.dll" />                
                <includes name="log4net.dll" />
            </fileset>
        </delete>
    </target>

    <!-- Build task and sdk documentation -->
    <target name="doc" depends="build" description="build documentation">
        <available property="NantDocumenterExists" resource="${nant.dir}/bin/NDoc.Documenter.NAnt.dll" type="File" />
        <if test="${not NantDocumenterExists}">
            <fail message="NDoc.Documenter.NAnt.dll not found. Run the 'userdoc' target in your NAnt source tree" />
        </if>
        <ndoc>
            <assemblies basedir="${build.dir}/bin" failonempty="true">
                <includes name="NAnt.Contrib.Tasks.dll" />
                <includes name="${nant.dir}/bin/NAnt.Core.dll" />
            </assemblies>
            <documenters>
                <documenter name="NAnt">
                    <property name="OutputDirectory" value="${build.dir}/doc/help" />
                    <property name="SdkDocVersion" value="${link.sdkdoc.version}" />
                    <property name="SdkLinksOnWeb" value="${link.sdkdoc.web}" />
                    <!-- set base uri used for linking to NAnt docs -->
                    <property name="NAntBaseUri" value="${nant.base.uri}" />
                    <!-- only document classes in NAnt.Contrib namespace -->
                    <property name="NamespaceFilter" value="NAnt.Contrib" />
                    <!-- set the name of the application for which docs are generated -->
                    <property name="ApplicationName" value="NAntContrib" />
                    <property name="DocumentAttributes" value="True" />
                    <property name="IncludeAssemblyVersion" value="True" />
                    <property name="ShowMissingParams" value="True" />
                    <property name="ShowMissingReturns" value="True" />
                    <property name="ShowMissingValues" value="True" />
                </documenter>
                <documenter name="MSDN">
                    <property name="OutputDirectory" value="${build.dir}/doc/sdk" />
                    <property name="HtmlHelpName" value="NAntContrib-SDK" />
                    <property name="SdkDocVersion" value="${link.sdkdoc.version}" />
                    <property name="SdkLinksOnWeb" value="${link.sdkdoc.web}" />
                    <property name="IncludeFavorites" value="False" />
                    <property name="Title" value="NAntContrib SDK Documentation - v.${project.version}" />
                    <property name="SplitTOCs" value="False" />
                    <property name="DefaulTOC" value="" />
                    <property name="ShowVisualBasic" value="True" />
                    <property name="ShowMissingSummaries" value="${build.debug}" />
                    <property name="ShowMissingRemarks" value="${build.debug}" />
                    <property name="ShowMissingParams" value="${build.debug}" />
                    <property name="ShowMissingReturns" value="${build.debug}" />
                    <property name="ShowMissingValues" value="${build.debug}" />
                    <property name="DocumentInternals" value="False" />
                    <property name="DocumentProtected" value="True" />
                    <property name="DocumentPrivates" value="False" />
                    <property name="DocumentEmptyNamespaces" value="False" />
                    <property name="IncludeAssemblyVersion" value="False" />
                    <property name="CopyrightText" value="Copyright (C) 2001-2003 Gerry Shaw" />
                    <property name="CopyrightHref" value="http://nantcontrib.sourceforge.net" />
                 </documenter>
            </documenters>
        </ndoc>
        
        <!-- delete everything but the .chm -->
        <delete>
            <fileset basedir="${build.dir}/doc/sdk">
                <includes name="**/*" />
                <excludes name="NAntContrib-SDK.chm" />
            </fileset>
        </delete>
        
        <!-- copy images and stylesheet so we can preview userdoc and have it look right -->
        <copy todir="${build.dir}/doc/help">
            <fileset basedir="doc/help">
                <includes name="**/*" />
            </fileset>
        </copy>
        <echo message="Preview task references: file://${build.dir}/doc/help/tasks/index.html"/>
    </target>
    <target name="package" depends="test doc" description="Creates a package zip file.">
        <!-- remove non-release files -->
        <delete>
            <fileset basedir="${build.dir}">
                <!-- remove test assemblies -->
                <includes name="bin/*.Tests.*" />
                <!-- remove generated schema's -->
                <includes name="schema/**" />
            </fileset>
        </delete>

        <!-- copy project files -->
        <copy todir="${build.dir}">
            <fileset>
                <includes name="${src.dir}/**" />
                <includes name="${tests.dir}/**" />
                <includes name="${tools.dir}/**" />
                <includes name="*" />

                <!-- exclude tools build directory -->
                <excludes name="${tools.dir}/**/build/**" />
                <!-- exclude nighlty build file -->
                <excludes name="nightly.xml" />
                <!-- exclude release build file -->
                <excludes name="release.xml" />
                <!--exclude VS.Net stuff -->
                <excludes name="**/*.suo" />
                <excludes name="**/*j.user" />
                <excludes name="**/bin/**" />
                <excludes name="**/obj/**" />
            </fileset>
        </copy>

        <!-- copy website files -->
        <copy todir="${build.dir}/doc">
            <fileset basedir="doc">
                <includes name="*" />
            </fileset>
        </copy>

        <!-- create zip file -->
        <property name="project.zip-path" value="${nant.project.basedir}/build/${project.name}.Tasks-${project.version}.zip" />
        <zip zipfile="${project.zip-path}">
            <fileset basedir="${build.dir}">
                <includes name="**/*" />
                <!-- exclude NAnt.Xsd.Tasks assembly and debug symbols -->
                <excludes name="bin/NAnt.Xsd.Tasks.dll" />
                <excludes name="bin/NAnt.Xsd.Tasks.pdb" />                
                <!-- exclude temporary files -->
                <excludes name="**/cache/**"/>
                <excludes name="**/_*/**"/>
            </fileset>
        </zip>
        <echo message="Created a '${project.config}' package at file://${project.zip-path}" />
    </target>
    <!-- Framework support targets -->
    <target name="set-framework-configuration">
        <if test="${not(target::exists('set-'+framework::get-target-framework()+'-framework-configuration'))}">
            <fail message="The '${framework::get-target-framework()}' framework is not supported by this version of NAntContrib." />
        </if>
        <call target="set-${framework::get-target-framework()}-framework-configuration" />
    </target>
    <target name="set-net-1.0-framework-configuration">
        <property name="nant.settings.currentframework" value="net-1.0" />    
        <property name="current.build.defines" value="${build.defines}NET,NET_1_0" />
        <property name="link.sdkdoc.version" value="SDK_v1_0" />
        <property name="link.sdkdoc.web" value="false" />
    </target>
    <target name="set-net-1.1-framework-configuration">
        <property name="nant.settings.currentframework" value="net-1.1" />
        <property name="current.build.defines" value="${build.defines}NET,NET_1_1" />
        <property name="link.sdkdoc.version" value="SDK_v1_1" />
        <property name="link.sdkdoc.web" value="false" />
    </target>
    <target name="set-net-2.0-framework-configuration">
        <property name="nant.settings.currentframework" value="net-2.0" />
        <property name="current.build.defines" value="${build.defines}NET,NET_2_0" />
        <property name="link.sdkdoc.version" value="SDK_v1_1" />        
        <property name="link.sdkdoc.web" value="true" />
    </target>
    <target name="set-netcf-1.0-framework-configuration">
        <property name="nant.settings.currentframework" value="netcf-1.0" />
        <property name="current.build.defines" value="${build.defines}NETCF,NETCF_1_0" />
        <property name="link.sdkdoc.version" value="SDK_v1_1" />
        <property name="link.sdkdoc.web" value="false" />
    </target>
    <target name="set-mono-1.0-framework-configuration">
        <property name="nant.settings.currentframework" value="mono-1.0" />
        <property name="current.build.defines" value="${build.defines}MONO,MONO_1_0" />
        <property name="link.sdkdoc.version" value="SDK_v1_1" />
        <property name="link.sdkdoc.web" value="true" />
    </target>
    <target name="set-sscli-1.0-framework-configuration">
        <property name="nant.settings.currentframework" value="sscli-1.0" />
        <property name="current.build.defines" value="${build.defines}SSCLI,SSCLI_1_0" />
        <property name="link.sdkdoc.version" value="SDK_v1_0" />
        <property name="link.sdkdoc.web" value="true" />
    </target>
</project>
